// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: beings.sql

package dbg

import (
	"context"
	"database/sql"
)

const createBeing = `-- name: CreateBeing :one
insert into mud.beings (name, description, room) values ($1, $2, $3) returning id, name, description, room, owner
`

type CreateBeingParams struct {
	Name        string
	Description string
	Room        int64
}

func (q *Queries) CreateBeing(ctx context.Context, arg *CreateBeingParams) (MudBeing, error) {
	row := q.queryRow(ctx, q.createBeingStmt, createBeing, arg.Name, arg.Description, arg.Room)
	var i MudBeing
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Room,
		&i.Owner,
	)
	return i, err
}

const deleteBeing = `-- name: DeleteBeing :exec
delete from mud.beings where id = $1
`

func (q *Queries) DeleteBeing(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteBeingStmt, deleteBeing, id)
	return err
}

const getBeingById = `-- name: GetBeingById :one
select id, name, description, room, owner from mud.beings where id = $1
`

func (q *Queries) GetBeingById(ctx context.Context, id int64) (MudBeing, error) {
	row := q.queryRow(ctx, q.getBeingByIdStmt, getBeingById, id)
	var i MudBeing
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Room,
		&i.Owner,
	)
	return i, err
}

const getBeingByName = `-- name: GetBeingByName :one
select id, name, description, room, owner from mud.beings where name = $1
`

func (q *Queries) GetBeingByName(ctx context.Context, name string) (MudBeing, error) {
	row := q.queryRow(ctx, q.getBeingByNameStmt, getBeingByName, name)
	var i MudBeing
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Room,
		&i.Owner,
	)
	return i, err
}

const updateBeing = `-- name: UpdateBeing :exec
update mud.beings set description=$2, room=$3 where id=$1
`

type UpdateBeingParams struct {
	ID          int64
	Description string
	Room        int64
}

func (q *Queries) UpdateBeing(ctx context.Context, arg *UpdateBeingParams) error {
	_, err := q.exec(ctx, q.updateBeingStmt, updateBeing, arg.ID, arg.Description, arg.Room)
	return err
}

const updateBeingOwner = `-- name: UpdateBeingOwner :exec
update mud.beings set owner=$2 where id=$1
`

type UpdateBeingOwnerParams struct {
	ID    int64
	Owner sql.NullInt64
}

func (q *Queries) UpdateBeingOwner(ctx context.Context, arg *UpdateBeingOwnerParams) error {
	_, err := q.exec(ctx, q.updateBeingOwnerStmt, updateBeingOwner, arg.ID, arg.Owner)
	return err
}
