// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package dbg

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBeingStmt, err = db.PrepareContext(ctx, createBeing); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBeing: %w", err)
	}
	if q.createUnlinkedRoomStmt, err = db.PrepareContext(ctx, createUnlinkedRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUnlinkedRoom: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteBeingStmt, err = db.PrepareContext(ctx, deleteBeing); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBeing: %w", err)
	}
	if q.getBeingByIdStmt, err = db.PrepareContext(ctx, getBeingById); err != nil {
		return nil, fmt.Errorf("error preparing query GetBeingById: %w", err)
	}
	if q.getBeingByNameStmt, err = db.PrepareContext(ctx, getBeingByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetBeingByName: %w", err)
	}
	if q.getRoomStmt, err = db.PrepareContext(ctx, getRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoom: %w", err)
	}
	if q.getRoomsStmt, err = db.PrepareContext(ctx, getRooms); err != nil {
		return nil, fmt.Errorf("error preparing query GetRooms: %w", err)
	}
	if q.getUserBeingNamesStmt, err = db.PrepareContext(ctx, getUserBeingNames); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserBeingNames: %w", err)
	}
	if q.getUserBeingsStmt, err = db.PrepareContext(ctx, getUserBeings); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserBeings: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUserByNameStmt, err = db.PrepareContext(ctx, getUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByName: %w", err)
	}
	if q.updateBeingStmt, err = db.PrepareContext(ctx, updateBeing); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBeing: %w", err)
	}
	if q.updateBeingOwnerStmt, err = db.PrepareContext(ctx, updateBeingOwner); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBeingOwner: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBeingStmt != nil {
		if cerr := q.createBeingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBeingStmt: %w", cerr)
		}
	}
	if q.createUnlinkedRoomStmt != nil {
		if cerr := q.createUnlinkedRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUnlinkedRoomStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteBeingStmt != nil {
		if cerr := q.deleteBeingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBeingStmt: %w", cerr)
		}
	}
	if q.getBeingByIdStmt != nil {
		if cerr := q.getBeingByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBeingByIdStmt: %w", cerr)
		}
	}
	if q.getBeingByNameStmt != nil {
		if cerr := q.getBeingByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBeingByNameStmt: %w", cerr)
		}
	}
	if q.getRoomStmt != nil {
		if cerr := q.getRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomStmt: %w", cerr)
		}
	}
	if q.getRoomsStmt != nil {
		if cerr := q.getRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomsStmt: %w", cerr)
		}
	}
	if q.getUserBeingNamesStmt != nil {
		if cerr := q.getUserBeingNamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserBeingNamesStmt: %w", cerr)
		}
	}
	if q.getUserBeingsStmt != nil {
		if cerr := q.getUserBeingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserBeingsStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUserByNameStmt != nil {
		if cerr := q.getUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByNameStmt: %w", cerr)
		}
	}
	if q.updateBeingStmt != nil {
		if cerr := q.updateBeingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBeingStmt: %w", cerr)
		}
	}
	if q.updateBeingOwnerStmt != nil {
		if cerr := q.updateBeingOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBeingOwnerStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	createBeingStmt        *sql.Stmt
	createUnlinkedRoomStmt *sql.Stmt
	createUserStmt         *sql.Stmt
	deleteBeingStmt        *sql.Stmt
	getBeingByIdStmt       *sql.Stmt
	getBeingByNameStmt     *sql.Stmt
	getRoomStmt            *sql.Stmt
	getRoomsStmt           *sql.Stmt
	getUserBeingNamesStmt  *sql.Stmt
	getUserBeingsStmt      *sql.Stmt
	getUserByIdStmt        *sql.Stmt
	getUserByNameStmt      *sql.Stmt
	updateBeingStmt        *sql.Stmt
	updateBeingOwnerStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		createBeingStmt:        q.createBeingStmt,
		createUnlinkedRoomStmt: q.createUnlinkedRoomStmt,
		createUserStmt:         q.createUserStmt,
		deleteBeingStmt:        q.deleteBeingStmt,
		getBeingByIdStmt:       q.getBeingByIdStmt,
		getBeingByNameStmt:     q.getBeingByNameStmt,
		getRoomStmt:            q.getRoomStmt,
		getRoomsStmt:           q.getRoomsStmt,
		getUserBeingNamesStmt:  q.getUserBeingNamesStmt,
		getUserBeingsStmt:      q.getUserBeingsStmt,
		getUserByIdStmt:        q.getUserByIdStmt,
		getUserByNameStmt:      q.getUserByNameStmt,
		updateBeingStmt:        q.updateBeingStmt,
		updateBeingOwnerStmt:   q.updateBeingOwnerStmt,
	}
}
