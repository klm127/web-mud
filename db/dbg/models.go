// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package dbg

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type MudUserlevel string

const (
	MudUserlevelPlayer       MudUserlevel = "player"
	MudUserlevelTrialBuilder MudUserlevel = "trial-builder"
	MudUserlevelBuilder      MudUserlevel = "builder"
	MudUserlevelModerator    MudUserlevel = "moderator"
	MudUserlevelAdmin        MudUserlevel = "admin"
)

func (e *MudUserlevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MudUserlevel(s)
	case string:
		*e = MudUserlevel(s)
	default:
		return fmt.Errorf("unsupported scan type for MudUserlevel: %T", src)
	}
	return nil
}

type NullMudUserlevel struct {
	MudUserlevel MudUserlevel
	Valid        bool // Valid is true if MudUserlevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMudUserlevel) Scan(value interface{}) error {
	if value == nil {
		ns.MudUserlevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MudUserlevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMudUserlevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.MudUserlevel, nil
}

type MudBeing struct {
	ID          int64
	Name        string
	Description string
	Room        int64
	Owner       sql.NullInt64
}

type MudRoom struct {
	ID          int64
	Name        string
	Description string
	Img         sql.NullString
	Objects     []int64
	N           sql.NullInt64
	S           sql.NullInt64
	E           sql.NullInt64
	W           sql.NullInt64
	Ne          sql.NullInt64
	Se          sql.NullInt64
	Sw          sql.NullInt64
	Nw          sql.NullInt64
	U           sql.NullInt64
	D           sql.NullInt64
	I           sql.NullInt64
	O           sql.NullInt64
}

type MudUser struct {
	ID        int64
	Name      string
	Password  string
	Created   time.Time
	LastLogin time.Time
	Level     MudUserlevel
	Being     int64
}
