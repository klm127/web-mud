// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package dbg

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (name, password, level) values ($1, $2, $3) returning id, name, password, created, last_login, level
`

type CreateUserParams struct {
	Name     string
	Password string
	Level    Userlevel
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Name, arg.Password, arg.Level)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Created,
		&i.LastLogin,
		&i.Level,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, name, password, created, last_login, level from users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Created,
		&i.LastLogin,
		&i.Level,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
select id, name, password, created, last_login, level from users where name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.queryRow(ctx, q.getUserByNameStmt, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Created,
		&i.LastLogin,
		&i.Level,
	)
	return i, err
}
