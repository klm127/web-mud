// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package dbg

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
insert into mud.users as users (name, password, level, being) values ($1, $2, $3, $4) returning id, name, password, created, last_login, level, being
`

type CreateUserParams struct {
	Name     string
	Password string
	Level    MudUserlevel
	Being    int64
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (MudUser, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.Password,
		arg.Level,
		arg.Being,
	)
	var i MudUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Created,
		&i.LastLogin,
		&i.Level,
		&i.Being,
	)
	return i, err
}

const getUserBeingNames = `-- name: GetUserBeingNames :many
select name from mud.beings where owner = $1
`

func (q *Queries) GetUserBeingNames(ctx context.Context, owner sql.NullInt64) ([]string, error) {
	rows, err := q.query(ctx, q.getUserBeingNamesStmt, getUserBeingNames, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBeings = `-- name: GetUserBeings :many
select id, name, description, room, owner from mud.beings where owner = $1
`

func (q *Queries) GetUserBeings(ctx context.Context, owner sql.NullInt64) ([]MudBeing, error) {
	rows, err := q.query(ctx, q.getUserBeingsStmt, getUserBeings, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MudBeing
	for rows.Next() {
		var i MudBeing
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Room,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
select id, name, password, created, last_login, level, being from mud.users as users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (MudUser, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i MudUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Created,
		&i.LastLogin,
		&i.Level,
		&i.Being,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
select id, name, password, created, last_login, level, being from mud.users as users where name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (MudUser, error) {
	row := q.queryRow(ctx, q.getUserByNameStmt, getUserByName, name)
	var i MudUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Created,
		&i.LastLogin,
		&i.Level,
		&i.Being,
	)
	return i, err
}
