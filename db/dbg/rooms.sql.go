// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: rooms.sql

package dbg

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createUnlinkedRoom = `-- name: CreateUnlinkedRoom :one
insert into mud.rooms (name, description, objects) values ($1, $2, $3) returning id, name, description, img, objects, n, s, e, w, ne, se, sw, nw, u, d, i, o
`

type CreateUnlinkedRoomParams struct {
	Name        string
	Description string
	Objects     []int64
}

func (q *Queries) CreateUnlinkedRoom(ctx context.Context, arg *CreateUnlinkedRoomParams) (MudRoom, error) {
	row := q.queryRow(ctx, q.createUnlinkedRoomStmt, createUnlinkedRoom, arg.Name, arg.Description, pq.Array(arg.Objects))
	var i MudRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Img,
		pq.Array(&i.Objects),
		&i.N,
		&i.S,
		&i.E,
		&i.W,
		&i.Ne,
		&i.Se,
		&i.Sw,
		&i.Nw,
		&i.U,
		&i.D,
		&i.I,
		&i.O,
	)
	return i, err
}

const getRoom = `-- name: GetRoom :one
select id, name, description, img, objects, n, s, e, w, ne, se, sw, nw, u, d, i, o from mud.rooms where id = $1
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (MudRoom, error) {
	row := q.queryRow(ctx, q.getRoomStmt, getRoom, id)
	var i MudRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Img,
		pq.Array(&i.Objects),
		&i.N,
		&i.S,
		&i.E,
		&i.W,
		&i.Ne,
		&i.Se,
		&i.Sw,
		&i.Nw,
		&i.U,
		&i.D,
		&i.I,
		&i.O,
	)
	return i, err
}

const getRooms = `-- name: GetRooms :many
select id, name, description, img, objects, n, s, e, w, ne, se, sw, nw, u, d, i, o from mud.rooms as rooms
`

func (q *Queries) GetRooms(ctx context.Context) ([]MudRoom, error) {
	rows, err := q.query(ctx, q.getRoomsStmt, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MudRoom
	for rows.Next() {
		var i MudRoom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Img,
			pq.Array(&i.Objects),
			&i.N,
			&i.S,
			&i.E,
			&i.W,
			&i.Ne,
			&i.Se,
			&i.Sw,
			&i.Nw,
			&i.U,
			&i.D,
			&i.I,
			&i.O,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :exec
update mud.rooms set name=$2, description=$3, img=$4, objects=$5, n=$6, s=$7, e=$8, w=$9, ne=$10, se=$11, sw=$12, nw=$13, u=$14, d=$15, i=$16, o=$17 where id=$1
`

type UpdateRoomParams struct {
	ID          int64
	Name        string
	Description string
	Img         sql.NullString
	Objects     []int64
	N           sql.NullInt64
	S           sql.NullInt64
	E           sql.NullInt64
	W           sql.NullInt64
	Ne          sql.NullInt64
	Se          sql.NullInt64
	Sw          sql.NullInt64
	Nw          sql.NullInt64
	U           sql.NullInt64
	D           sql.NullInt64
	I           sql.NullInt64
	O           sql.NullInt64
}

func (q *Queries) UpdateRoom(ctx context.Context, arg *UpdateRoomParams) error {
	_, err := q.exec(ctx, q.updateRoomStmt, updateRoom,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Img,
		pq.Array(arg.Objects),
		arg.N,
		arg.S,
		arg.E,
		arg.W,
		arg.Ne,
		arg.Se,
		arg.Sw,
		arg.Nw,
		arg.U,
		arg.D,
		arg.I,
		arg.O,
	)
	return err
}
